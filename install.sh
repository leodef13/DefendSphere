#!/bin/bash

# DefendSphere Complete Installation Script
# –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_NAME="DefendSphere"
PROJECT_VERSION="1.0.0"
FRONTEND_PORT=3000
BACKEND_PORT=5000
REDIS_PORT=6380

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  $PROJECT_NAME v$PROJECT_VERSION${NC}"
    echo -e "${BLUE}  Complete Installation${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_section() {
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}$(echo "$1" | sed 's/./-/g')${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_step() {
    echo -e "${MAGENTA}üîß $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_os() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        print_success "Linux —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        print_success "macOS —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        OS="macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        print_success "Windows —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        OS="windows"
    else
        print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OSTYPE"
        OS="unknown"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    local missing_deps=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    if ! command -v node &> /dev/null; then
        missing_deps+=("Node.js")
    else
        local node_version=$(node --version | cut -d'v' -f2)
        local major_version=$(echo $node_version | cut -d'.' -f1)
        if [ "$major_version" -lt 18 ]; then
            print_error "Node.js –≤–µ—Ä—Å–∏—è $node_version –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –¢—Ä–µ–±—É–µ—Ç—Å—è 18+"
            missing_deps+=("Node.js 18+")
        else
            print_success "Node.js $node_version –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    if ! command -v npm &> /dev/null; then
        missing_deps+=("npm")
    else
        print_success "npm –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
    if ! command -v git &> /dev/null; then
        missing_deps+=("Git")
    else
        print_success "Git –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if command -v docker &> /dev/null; then
        print_success "Docker –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        DOCKER_AVAILABLE=true
    else
        print_warning "Docker –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π Redis)"
        DOCKER_AVAILABLE=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if command -v docker-compose &> /dev/null; then
        print_success "Docker Compose –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        DOCKER_COMPOSE_AVAILABLE=true
    else
        print_warning "Docker Compose –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        DOCKER_COMPOSE_AVAILABLE=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis (–ª–æ–∫–∞–ª—å–Ω—ã–π)
    if command -v redis-cli &> /dev/null; then
        print_success "Redis CLI –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        REDIS_LOCAL_AVAILABLE=true
    else
        print_warning "Redis CLI –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        REDIS_LOCAL_AVAILABLE=false
    fi
    
    # –í—ã–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        
        print_warning "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
        exit 1
    fi
    
    print_success "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Ubuntu/Debian
install_ubuntu_deps() {
    if [ "$OS" != "linux" ]; then
        return
    fi
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Ubuntu/Debian"
    
    if command -v apt-get &> /dev/null; then
        print_message "–û–±–Ω–∞—Ä—É–∂–µ–Ω apt-get, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
        sudo apt-get update
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        sudo apt-get install -y curl wget build-essential
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v redis-server &> /dev/null; then
            print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis..."
            sudo apt-get install -y redis-server
            sudo systemctl enable redis-server
            sudo systemctl start redis-server
            print_success "Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
        fi
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        local node_version=$(node --version | cut -d'v' -f2)
        local major_version=$(echo $node_version | cut -d'.' -f1)
        if [ "$major_version" -lt 18 ]; then
            print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 18+..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            print_success "Node.js –æ–±–Ω–æ–≤–ª–µ–Ω"
        fi
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è macOS
install_macos_deps() {
    if [ "$OS" != "macos" ]; then
        return
    fi
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Homebrew –¥–ª—è macOS"
    
    if ! command -v brew &> /dev/null; then
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        print_success "Homebrew —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis
    if ! command -v redis-server &> /dev/null; then
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis —á–µ—Ä–µ–∑ Homebrew..."
        brew install redis
        brew services start redis
        print_success "Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Node.js –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    local node_version=$(node --version | cut -d'v' -f2)
    local major_version=$(echo $node_version | cut -d'.' -f1)
    if [ "$major_version" -lt 18 ]; then
        print_message "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Node.js —á–µ—Ä–µ–∑ Homebrew..."
        brew install node@18
        print_success "Node.js –æ–±–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup_project() {
    print_section "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if [ -d ".git" ]; then
        print_message "–ü—Ä–æ–µ–∫—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
        local current_branch=$(git branch --show-current)
        if [ "$current_branch" != "cursor/defendsphere-343d" ]; then
            print_message "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É cursor/defendsphere-343d..."
            git checkout cursor/defendsphere-343d
        fi
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        print_message "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
        git pull origin cursor/defendsphere-343d
    else
        print_error "–ü—Ä–æ–µ–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
        print_warning "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        exit 1
    fi
    
    print_success "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
install_project_deps() {
    print_section "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞"
    
    # Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    if [ -f "package.json" ]; then
        npm install
        print_success "Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        exit 1
    fi
    
    # Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        cd backend && npm install && cd ..
        print_success "Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "Backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–ª–∏ package.json –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        exit 1
    fi
    
    # Scripts –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ scripts –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    if [ -d "scripts" ] && [ -f "scripts/package.json" ]; then
        cd scripts && npm install && cd ..
        print_success "Scripts –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "Scripts –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–ª–∏ package.json –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        exit 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    print_section "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    
    if [ ! -f ".env" ]; then
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            print_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example"
            print_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
        else
            print_error ".env.example —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
    else
        print_message ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–Ω—è—Ç—ã
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    
    if lsof -Pi :$FRONTEND_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_warning "–ü–æ—Ä—Ç $FRONTEND_PORT –∑–∞–Ω—è—Ç"
        read -p "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç frontend? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è frontend: " new_port
            sed -i "s/FRONTEND_PORT=3000/FRONTEND_PORT=$new_port/" .env
            FRONTEND_PORT=$new_port
            print_success "–ü–æ—Ä—Ç frontend –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $new_port"
        fi
    fi
    
    if lsof -Pi :$BACKEND_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_warning "–ü–æ—Ä—Ç $BACKEND_PORT –∑–∞–Ω—è—Ç"
        read -p "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç backend? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è backend: " new_port
            sed -i "s/BACKEND_PORT=5000/BACKEND_PORT=$new_port/" .env
            BACKEND_PORT=$new_port
            print_success "–ü–æ—Ä—Ç backend –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $new_port"
        fi
    fi
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
init_redis() {
    print_section "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis"
    
    if [ "$DOCKER_AVAILABLE" = true ] && [ "$DOCKER_COMPOSE_AVAILABLE" = true ]; then
        print_step "–ó–∞–ø—É—Å–∫ Redis –≤ Docker..."
        docker-compose up -d redis
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Redis
        print_message "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Redis..."
        sleep 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        if docker exec defendsphere-redis-1 redis-cli ping | grep -q "PONG"; then
            print_success "Redis –∑–∞–ø—É—â–µ–Ω –≤ Docker"
        else
            print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Redis –≤ Docker"
            exit 1
        fi
    else
        print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis..."
        if ! redis-cli -p $REDIS_PORT ping &> /dev/null; then
            print_warning "–õ–æ–∫–∞–ª—å–Ω—ã–π Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            
            if [ "$OS" = "linux" ]; then
                print_message "–ó–∞–ø—É—Å–∫ Redis —á–µ—Ä–µ–∑ systemctl..."
                sudo systemctl start redis-server
            elif [ "$OS" = "macos" ]; then
                print_message "–ó–∞–ø—É—Å–∫ Redis —á–µ—Ä–µ–∑ Homebrew..."
                brew services start redis
            else
                print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis –≤—Ä—É—á–Ω—É—é: redis-server --port $REDIS_PORT"
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ Redis..."
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        if redis-cli -p $REDIS_PORT ping &> /dev/null; then
            print_success "–õ–æ–∫–∞–ª—å–Ω—ã–π Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            print_error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            exit 1
        fi
    fi
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print_step "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
    cd scripts && npm run init && cd ..
    print_success "Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    print_section "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    
    print_step "–°–±–æ—Ä–∫–∞ frontend..."
    npm run build
    print_success "Frontend —Å–æ–±—Ä–∞–Ω"
    
    print_step "–°–±–æ—Ä–∫–∞ backend..."
    cd backend && npm run build && cd ..
    print_success "Backend —Å–æ–±—Ä–∞–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ (Linux)
create_systemd_services() {
    if [ "$OS" != "linux" ]; then
        return
    fi
    
    print_section "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ (Linux)"
    
    local user=$(whoami)
    local project_path=$(pwd)
    
    # Backend —Å–µ—Ä–≤–∏—Å
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ backend —Å–µ—Ä–≤–∏—Å–∞..."
    sudo tee /etc/systemd/system/defendsphere-backend.service > /dev/null <<EOF
[Unit]
Description=DefendSphere Backend API
After=network.target redis.service
Wants=redis.service

[Service]
Type=simple
User=$user
WorkingDirectory=$project_path/backend
Environment=NODE_ENV=production
Environment=PORT=$BACKEND_PORT
Environment=REDIS_URL=redis://localhost:$REDIS_PORT
ExecStart=/usr/bin/node index.js
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    
    # Frontend —Å–µ—Ä–≤–∏—Å
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ frontend —Å–µ—Ä–≤–∏—Å–∞..."
    sudo tee /etc/systemd/system/defendsphere-frontend.service > /dev/null <<EOF
[Unit]
Description=DefendSphere Frontend
After=network.target defendsphere-backend.service
Wants=defendsphere-backend.service

[Service]
Type=simple
User=$user
WorkingDirectory=$project_path
Environment=NODE_ENV=production
Environment=PORT=$FRONTEND_PORT
ExecStart=/usr/bin/node server.js
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd
    sudo systemctl daemon-reload
    
    # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    sudo systemctl enable defendsphere-backend
    sudo systemctl enable defendsphere-frontend
    
    print_success "Systemd —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –≤–∫–ª—é—á–µ–Ω—ã"
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
final_setup() {
    print_section "–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Makefile –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "Makefile" ]; then
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ Makefile..."
        # Makefile —É–∂–µ —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ
        print_success "Makefile –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if [ ! -f "scripts/quick-start.sh" ]; then
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ quick-start —Å–∫—Ä–∏–ø—Ç–∞..."
        # –°–∫—Ä–∏–ø—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ
        print_success "Quick-start —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."
    chmod +x scripts/quick-start.sh
    chmod +x install.sh
    print_success "–ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    echo ""
    echo -e "${BLUE}================================${NC}"
    echo -e "${GREEN}üéâ $PROJECT_NAME —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
    echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
    echo -e "  Frontend:     ${GREEN}http://localhost:$FRONTEND_PORT${NC}"
    echo -e "  Backend API:  ${GREEN}http://localhost:$BACKEND_PORT${NC}"
    echo -e "  Admin Panel:  ${GREEN}http://localhost:$FRONTEND_PORT/admin${NC}"
    echo ""
    echo -e "${YELLOW}–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:${NC}"
    echo -e "  Admin:        ${GREEN}admin / admin${NC}"
    echo -e "  User 1:       ${GREEN}user1 / user1${NC}"
    echo -e "  User 2:       ${GREEN}user2 / user2${NC}"
    echo ""
    echo -e "${YELLOW}–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
    echo -e "  –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫:  ${GREEN}./scripts/quick-start.sh${NC}"
    echo -e "  Make –∫–æ–º–∞–Ω–¥—ã:     ${GREEN}make help${NC}"
    echo -e "  Docker –∑–∞–ø—É—Å–∫:    ${GREEN}make docker-up${NC}"
    echo -e "  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: ${GREEN}cd scripts && npm run health-check${NC}"
    echo ""
    
    if [ "$OS" = "linux" ]; then
        echo -e "${YELLOW}Systemd —Å–µ—Ä–≤–∏—Å—ã:${NC}"
        echo -e "  –ó–∞–ø—É—Å–∫:          ${GREEN}sudo systemctl start defendsphere-backend${NC}"
        echo -e "  –°—Ç–∞—Ç—É—Å:          ${GREEN}sudo systemctl status defendsphere-backend${NC}"
        echo -e "  –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫:      ${GREEN}sudo systemctl enable defendsphere-backend${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}================================${NC}"
    echo -e "${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo -e "${BLUE}================================${NC}"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤
    if [ "$EUID" -eq 0 ]; then
        print_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root"
        print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        exit 1
    fi
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    check_os
    check_dependencies
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –û–°
    if [ "$OS" = "linux" ]; then
        install_ubuntu_deps
    elif [ "$OS" = "macos" ]; then
        install_macos_deps
    fi
    
    setup_project
    install_project_deps
    setup_environment
    init_redis
    build_project
    
    # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è Linux
    if [ "$OS" = "linux" ]; then
        create_systemd_services
    fi
    
    final_setup
    show_final_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
cleanup() {
    print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    exit 1
}

trap cleanup SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main "$@"