#!/bin/bash

# DefendSphere Quick Start Script
# –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_NAME="DefendSphere"
FRONTEND_PORT=3000
BACKEND_PORT=5000
REDIS_PORT=6379

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  $PROJECT_NAME Quick Start${NC}"
    echo -e "${BLUE}================================${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    if ! command -v npm &> /dev/null; then
        print_error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π Redis"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_warning "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    print_message "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ ! -d "node_modules" ]; then
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        npm install
    fi
    
    # Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ ! -d "backend/node_modules" ]; then
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        cd backend && npm install && cd ..
    fi
    
    # Scripts –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ ! -d "scripts/node_modules" ]; then
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ scripts –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        cd scripts && npm install && cd ..
    fi
    
    print_message "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
init_redis() {
    print_message "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis..."
    
    if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker
        print_message "–ó–∞–ø—É—Å–∫ Redis –≤ Docker..."
        docker-compose up -d redis
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Redis
        print_message "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Redis..."
        sleep 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        if docker exec defendsphere-redis-1 redis-cli ping | grep -q "PONG"; then
            print_message "Redis –∑–∞–ø—É—â–µ–Ω –≤ Docker"
        else
            print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Redis –≤ Docker"
            exit 1
        fi
    else
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis
        print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis..."
        if ! redis-cli -p $REDIS_PORT ping &> /dev/null; then
            print_warning "–õ–æ–∫–∞–ª—å–Ω—ã–π Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: redis-server --port $REDIS_PORT"
            print_message "–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
            exit 1
        fi
    fi
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print_message "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
    cd scripts && npm run init && cd ..
    
    print_message "Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
}

# –ó–∞–ø—É—Å–∫ backend
start_backend() {
    print_message "–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f ".env" ]; then
        print_message "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
        cp .env.example .env
        print_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    fi
    
    # –ó–∞–ø—É—Å–∫ backend –≤ —Ñ–æ–Ω–µ
    cd backend && npm run dev > ../backend.log 2>&1 &
    BACKEND_PID=$!
    cd ..
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend
    print_message "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend..."
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    if curl -s http://localhost:$BACKEND_PORT/api/health &> /dev/null; then
        print_message "Backend –∑–∞–ø—É—â–µ–Ω (PID: $BACKEND_PID)"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ frontend
start_frontend() {
    print_message "–ó–∞–ø—É—Å–∫ frontend..."
    
    # –ó–∞–ø—É—Å–∫ frontend –≤ —Ñ–æ–Ω–µ
    npm run dev > frontend.log 2>&1 &
    FRONTEND_PID=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ frontend
    print_message "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ frontend..."
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    if curl -s http://localhost:$FRONTEND_PORT &> /dev/null; then
        print_message "Frontend –∑–∞–ø—É—â–µ–Ω (PID: $FRONTEND_PID)"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_info() {
    echo ""
    echo -e "${BLUE}================================${NC}"
    echo -e "${GREEN}üéâ $PROJECT_NAME —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
    echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
    echo -e "  Frontend:     ${GREEN}http://localhost:$FRONTEND_PORT${NC}"
    echo -e "  Backend API:  ${GREEN}http://localhost:$BACKEND_PORT${NC}"
    echo -e "  Admin Panel:  ${GREEN}http://localhost:$FRONTEND_PORT/admin${NC}"
    echo ""
    echo -e "${YELLOW}–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:${NC}"
    echo -e "  Admin:        ${GREEN}admin / admin${NC}"
    echo -e "  User 1:       ${GREEN}user1 / user1${NC}"
    echo -e "  User 2:       ${GREEN}user2 / user2${NC}"
    echo ""
    echo -e "${YELLOW}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}"
    echo -e "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:    ${GREEN}make stop${NC} –∏–ª–∏ ${GREEN}Ctrl+C${NC}"
    echo -e "  –õ–æ–≥–∏:         ${GREEN}make logs${NC}"
    echo -e "  –°—Ç–∞—Ç—É—Å:       ${GREEN}make status${NC}"
    echo ""
    echo -e "${BLUE}================================${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
cleanup() {
    print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ frontend
    if [ ! -z "$FRONTEND_PID" ]; then
        kill $FRONTEND_PID 2>/dev/null || true
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ backend
    if [ ! -z "$BACKEND_PID" ]; then
        kill $BACKEND_PID 2>/dev/null || true
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if command -v docker-compose &> /dev/null; then
        docker-compose down 2>/dev/null || true
    fi
    
    print_message "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    exit 0
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup SIGINT SIGTERM

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    check_dependencies
    install_dependencies
    init_redis
    start_backend
    start_frontend
    show_info
    
    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    print_message "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    wait
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"