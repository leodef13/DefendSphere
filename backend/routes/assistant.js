const express = require('express');
const router = express.Router();
const redis = require('redis');
const { authenticateToken } = require('../middleware/auth');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
const client = redis.createClient({
  url: process.env.REDIS_URL || 'redis://localhost:6379'
});

client.on('error', (err) => console.log('Redis Client Error', err));

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const securityStandards = {
  'iso27001': {
    title: 'ISO/IEC 27001',
    description: 'Information Security Management Systems (ISMS)',
    keyPoints: [
      'Risk assessment and treatment',
      'Security controls implementation',
      'Management commitment and leadership',
      'Continuous improvement',
      'Documentation and records'
    ],
    url: '/compliance',
    category: 'International Standard'
  },
  'gdpr': {
    title: 'GDPR',
    description: 'General Data Protection Regulation',
    keyPoints: [
      'Data protection principles',
      'Individual rights',
      'Data breach notification',
      'Privacy by design',
      'Accountability and governance'
    ],
    url: '/compliance',
    category: 'EU Regulation'
  },
  'dora': {
    title: 'DORA',
    description: 'Digital Operational Resilience Act',
    keyPoints: [
      'ICT risk management',
      'Incident reporting',
      'Digital resilience testing',
      'Third-party risk management',
      'Information sharing'
    ],
    url: '/compliance',
    category: 'EU Regulation'
  },
  'nis2': {
    title: 'NIS2',
    description: 'Network and Information Security Directive',
    keyPoints: [
      'Risk management measures',
      'Incident reporting',
      'Security requirements',
      'Supervision and enforcement',
      'Cross-border cooperation'
    ],
    url: '/compliance',
    category: 'EU Directive'
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function searchUserData(userId, query) {
  try {
    // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProfile = await client.hGetAll(`user:${userId}`);
    
    // –ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–∏–≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAssets = await client.sMembers(`user:${userId}:assets`);
    
    // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç—á–µ—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userReports = await client.sMembers(`user:${userId}:reports`);
    
    const results = [];
    
    // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
    Object.entries(userProfile).forEach(([key, value]) => {
      if (value.toLowerCase().includes(query.toLowerCase())) {
        results.push({
          type: 'profile',
          field: key,
          value: value,
          url: '/profile'
        });
      }
    });
    
    // –ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–∏–≤–∞–º
    for (const assetId of userAssets) {
      const asset = await client.hGetAll(`asset:${assetId}`);
      if (asset.name && asset.name.toLowerCase().includes(query.toLowerCase())) {
        results.push({
          type: 'asset',
          name: asset.name,
          status: asset.status,
          url: '/assets'
        });
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç—á–µ—Ç–∞–º
    for (const reportId of userReports) {
      const report = await client.hGetAll(`report:${reportId}`);
      if (report.title && report.title.toLowerCase().includes(query.toLowerCase())) {
        results.push({
          type: 'report',
          title: report.title,
          date: report.date,
          url: '/reports'
        });
      }
    }
    
    return results;
  } catch (error) {
    console.error('Error searching user data:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º Dashboard
function searchDashboardSections(query) {
  const sections = [
    { name: 'Home', url: '/home', description: 'Main dashboard overview' },
    { name: 'Reports', url: '/reports', description: 'Security reports and analytics' },
    { name: 'Compliance', url: '/compliance', description: 'Compliance monitoring and management' },
    { name: 'Assets', url: '/assets', description: 'Digital asset management' },
    { name: 'Suppliers', url: '/suppliers', description: 'Third-party supplier management' },
    { name: 'Integrations', url: '/integrations', description: 'System integrations' },
    { name: 'Customer Trust', url: '/customer-trust', description: 'Customer trust indicators' }
  ];
  
  return sections.filter(section => 
    section.name.toLowerCase().includes(query.toLowerCase()) ||
    section.description.toLowerCase().includes(query.toLowerCase())
  );
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
function generateAssistantResponse(message, userRole, searchResults = []) {
  const lowerMessage = message.toLowerCase();
  
  // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  for (const [key, standard] of Object.entries(securityStandards)) {
    if (lowerMessage.includes(key) || lowerMessage.includes(standard.title.toLowerCase())) {
      return {
        response: `${standard.title} (${standard.category}): ${standard.description}\n\nKey points:\n${standard.keyPoints.map(point => `‚Ä¢ ${point}`).join('\n')}\n\nWould you like me to guide you to the compliance section for more details?`,
        type: 'text',
        data: {
          url: standard.url,
          title: `View ${standard.title} Compliance`
        }
      };
    }
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º Dashboard
  if (lowerMessage.includes('dashboard') || lowerMessage.includes('section') || lowerMessage.includes('page')) {
    const sections = searchDashboardSections(message);
    if (sections.length > 0) {
      return {
        response: `I found these relevant dashboard sections:\n${sections.map(section => `‚Ä¢ ${section.name}: ${section.description}`).join('\n')}\n\nWhich section would you like to explore?`,
        type: 'text'
      };
    }
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (searchResults.length > 0) {
    const resultsText = searchResults.map(result => {
      if (result.type === 'profile') {
        return `‚Ä¢ Profile ${result.field}: ${result.value}`;
      } else if (result.type === 'asset') {
        return `‚Ä¢ Asset: ${result.name} (${result.status})`;
      } else if (result.type === 'report') {
        return `‚Ä¢ Report: ${result.title} (${result.date})`;
      }
    }).join('\n');
    
    return {
      response: `I found these items related to your query:\n${resultsText}\n\nWould you like me to show you more details about any of these?`,
      type: 'text'
    };
  }
  
  // –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
  if (lowerMessage.includes('help') || lowerMessage.includes('–ø–æ–º–æ—â—å')) {
    return {
      response: `I'm your Security Assistant! I can help you with:\n\nüîí Security Standards:\n‚Ä¢ ISO 27001, GDPR, DORA, NIS2\n\nüìä Dashboard Navigation:\n‚Ä¢ Reports, Compliance, Assets, Suppliers\n\nüë§ Personal Data:\n‚Ä¢ Profile information, assets, reports\n\nüí° Quick Actions:\n‚Ä¢ Generate reports, check compliance, monitor assets\n\nWhat would you like to know more about?`,
      type: 'text'
    };
  }
  
  if (lowerMessage.includes('compliance') || lowerMessage.includes('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ')) {
    return {
      response: `The Compliance section helps you monitor and manage compliance with various security standards. You can:\n\n‚Ä¢ View compliance scores and status\n‚Ä¢ Track audit progress\n‚Ä¢ Generate compliance reports\n‚Ä¢ Monitor certification status\n\nWould you like me to guide you to specific compliance areas or explain any particular standard?`,
      type: 'text',
      data: {
        url: '/compliance',
        title: 'Go to Compliance Section'
      }
    };
  }
  
  if (lowerMessage.includes('assets') || lowerMessage.includes('–∞–∫—Ç–∏–≤—ã')) {
    return {
      response: `The Assets section provides comprehensive monitoring and management of your digital assets:\n\n‚Ä¢ Server inventory and status\n‚Ä¢ Database security monitoring\n‚Ä¢ Endpoint protection status\n‚Ä¢ Mobile device management\n‚Ä¢ Vulnerability assessment\n‚Ä¢ Risk level tracking\n\nI can help you navigate to specific asset categories or explain asset security best practices.`,
      type: 'text',
      data: {
        url: '/assets',
        title: 'Go to Assets Section'
      }
    };
  }
  
  if (lowerMessage.includes('reports') || lowerMessage.includes('–æ—Ç—á–µ—Ç—ã')) {
    return {
      response: `The Reports section allows you to generate and analyze security reports:\n\n‚Ä¢ Security incident reports\n‚Ä¢ Compliance status reports\n‚Ä¢ Asset vulnerability reports\n‚Ä¢ Risk assessment reports\n‚Ä¢ Custom report builder\n‚Ä¢ Export functionality\n\nWhat type of report would you like to create or view?`,
      type: 'text',
      data: {
        url: '/reports',
        title: 'Go to Reports Section'
      }
    };
  }
  
  // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return {
    response: `I understand your question about DefendSphere. I can help you with security compliance, asset management, reporting, and navigating the dashboard. Could you please be more specific about what you'd like to know?\n\nYou can ask me about:\n‚Ä¢ Security standards (ISO 27001, GDPR, DORA, NIS2)\n‚Ä¢ Dashboard features and navigation\n‚Ä¢ Your personal data and assets\n‚Ä¢ Compliance requirements and best practices`,
    type: 'text'
  };
}

// POST /api/assistant - –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { message, userId, userRole } = req.body;
    
    if (!message || !userId) {
      return res.status(400).json({ 
        error: 'Message and userId are required' 
      });
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDataResults = await searchUserData(userId, message);
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º Dashboard
    const dashboardResults = searchDashboardSections(message);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    const response = generateAssistantResponse(message, userRole, userDataResults);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await client.lPush(`assistant:logs:${userId}`, JSON.stringify({
      timestamp: new Date().toISOString(),
      message,
      response: response.response,
      userRole
    }));
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
    await client.lTrim(`assistant:logs:${userId}`, 0, 99);
    
    res.json(response);
    
  } catch (error) {
    console.error('Assistant API error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: 'Failed to process assistant request'
    });
  }
});

// GET /api/assistant/logs - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/logs', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const logs = await client.lRange(`assistant:logs:${userId}`, 0, -1);
    
    const parsedLogs = logs.map(log => {
      try {
        return JSON.parse(log);
      } catch (e) {
        return null;
      }
    }).filter(Boolean);
    
    res.json({ logs: parsedLogs });
    
  } catch (error) {
    console.error('Error fetching assistant logs:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: 'Failed to fetch assistant logs'
    });
  }
});

// GET /api/assistant/standards - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö
router.get('/standards', authenticateToken, async (req, res) => {
  try {
    const { standard } = req.query;
    
    if (standard && securityStandards[standard.toLowerCase()]) {
      res.json(securityStandards[standard.toLowerCase()]);
    } else {
      res.json({ 
        available: Object.keys(securityStandards),
        standards: securityStandards 
      });
    }
    
  } catch (error) {
    console.error('Error fetching standards:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: 'Failed to fetch security standards'
    });
  }
});

module.exports = router;