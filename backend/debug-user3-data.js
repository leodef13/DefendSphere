import { createClient } from 'redis'

const redis = createClient({
  url: process.env.REDIS_URL || 'redis://localhost:6380'
})

redis.on('error', (err) => console.log('Redis Client Error', err))

async function debugUser3Data() {
  try {
    await redis.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ user3
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö user3:')
    const user3Data = await redis.hGetAll('user:user3')
    console.log('User3 –¥–∞–Ω–Ω—ã–µ:', user3Data)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    console.log('\nüè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:')
    console.log('Organization field:', user3Data.organization)
    console.log('Additional organizations:', user3Data.additionalOrganizations)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤—ã Company LLD
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ Company LLD:')
    const assetIds = await redis.sMembers('company:company-lld:assetIds')
    console.log('Asset IDs:', assetIds)
    
    for (const assetId of assetIds) {
      const assetData = await redis.hGet('company:company-lld:assets', assetId)
      if (assetData) {
        const asset = JSON.parse(assetData)
        console.log(`- ${asset.name} (${asset.type})`)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')
    const allUsers = await redis.sMembers('users')
    console.log('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', allUsers)
    
    for (const username of allUsers) {
      const userData = await redis.hGetAll(`user:${username}`)
      console.log(`${username}: organization = ${userData.organization}`)
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error)
  } finally {
    await redis.disconnect()
  }
}

debugUser3Data()