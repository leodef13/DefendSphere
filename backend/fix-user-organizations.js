import { createClient } from 'redis'

const redis = createClient({
  url: process.env.REDIS_URL || 'redis://localhost:6380'
})

redis.on('error', (err) => console.log('Redis Client Error', err))

async function fixUserOrganizations() {
  try {
    await redis.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usernames = await redis.sMembers('users')
    console.log('–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', usernames)
    
    for (const username of usernames) {
      const user = await redis.hGetAll(`user:${username}`)
      if (user.username) {
        console.log(`\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`)
        console.log('–¢–µ–∫—É—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', user.organization)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ organizations –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!user.organizations && user.organization) {
          const organizations = JSON.stringify([user.organization])
          await redis.hSet(`user:${username}`, 'organizations', organizations)
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ organizations: ${organizations}`)
        } else if (user.organizations) {
          console.log('‚úÖ organizations —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', user.organizations)
        } else {
          console.log('‚ö†Ô∏è –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        }
      }
    }
    
    console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message)
  } finally {
    await redis.disconnect()
  }
}

fixUserOrganizations()