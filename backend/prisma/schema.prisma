// Prisma schema for DefendSphere
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  users        User[]
  assets       Asset[]
  suppliers    Supplier[]
  reportsFiles ReportsFile[]
  reports      Reports[]
  customerTrust CustomerTrust[]
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  passwordHash  String
  role          String
  permissions   String         // JSON string array
  organizations Organization[]
  createdAt     DateTime       @default(now())
  lastLogin     DateTime       @default(now())
}

model Asset {
  id                Int           @id @default(autoincrement())
  organization      Organization  @relation(fields: [organizationId], references: [id])
  organizationId    Int
  name              String
  type              String
  environment       String
  compliancePercent Float
  riskLevel         String
  lastScan          DateTime?
  ownerId           Int?
  details           Json?

  @@index([organizationId], name: "idx_assets_org")
  @@index([riskLevel], name: "idx_assets_risk")
}

model Supplier {
  id             Int           @id @default(autoincrement())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId Int
  name           String
  details        Json?
}

model ReportsFile {
  id             Int           @id @default(autoincrement())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId Int
  uploadedBy     Int
  fileName       String
  fileType       String
  filePath       String
  uploadedAt     DateTime      @default(now())
  report         Reports?
}

model Reports {
  id               Int                 @id @default(autoincrement())
  organization     Organization        @relation(fields: [organizationId], references: [id])
  organizationId   Int
  reportFile       ReportsFile?        @relation(fields: [reportFileId], references: [id])
  reportFileId     Int?                @unique
  reportName       String?
  reportType       String?
  ownerId          Int?
  department       String?
  status           String?
  riskLevel        String?
  createdAt        DateTime            @default(now())
  summary          Json?
  assets           ReportAsset[]
  vulnerabilities  ReportVulnerability[]
  customerTrust    CustomerTrust[]

  @@index([organizationId, reportType], name: "idx_reports_org_type")
}

model ReportAsset {
  id                 Int                  @id @default(autoincrement())
  report             Reports              @relation(fields: [reportId], references: [id])
  reportId           Int
  assetName          String
  assetType          String
  environment        String
  compliancePercent  Float
  riskLevel          String
  lastScan           DateTime?
  ownerId            Int?
  details            Json?
  vulnerabilities    ReportVulnerability[]
}

model ReportVulnerability {
  id                 Int          @id @default(autoincrement())
  report             Reports      @relation(fields: [reportId], references: [id])
  reportId           Int
  asset              ReportAsset? @relation(fields: [assetId], references: [id])
  assetId            Int?
  vulnerabilityName  String
  severity           String
  description        String?
  recommendations    String?
  detectedAt         DateTime     @default(now())
}

model CustomerTrust {
  id             Int           @id @default(autoincrement())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId Int
  report         Reports?      @relation(fields: [reportId], references: [id])
  reportId       Int?
  metric         String
  value          Float
  capturedAt     DateTime      @default(now())
}

/// Compliance records stored in PostgreSQL
model ComplianceRecord {
  id                     Int           @id @default(autoincrement())
  organization          Organization  @relation(fields: [organizationId], references: [id])
  organizationId        Int
  userId                Int?
  standard              String
  department            String
  status                String         @default("Not Assessed")
  compliancePercentage  Int            @default(0)
  lastAssessmentDate    DateTime?
  nextScheduledAssessment DateTime?
  recommendations       String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now())

  @@index([organizationId], name: "idx_compliance_org")
  @@index([status], name: "idx_compliance_status")
}

/// Audit logs for user actions
model AuditLog {
  id          Int       @id @default(autoincrement())
  userId      Int?
  action      String
  entityType  String
  entityId    String
  metadata    Json?
  createdAt   DateTime  @default(now())
}


