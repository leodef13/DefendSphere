import { createClient } from 'redis'
import bcrypt from 'bcryptjs'

const REDIS_URL = process.env.REDIS_URL || 'redis://localhost:6380'

async function autoRecovery() {
  console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...')
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è Redis
  const redisUrls = [
    'redis://217.65.144.232:6380',
    'redis://localhost:6380',
    'redis://localhost:6379',
    'redis://127.0.0.1:6380',
    'redis://127.0.0.1:6379'
  ]
  
  let redis = null
  let connected = false
  
  for (const url of redisUrls) {
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: ${url}`)
      redis = createClient({ url })
      await redis.connect()
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ: ${url}`)
      connected = true
      break
    } catch (error) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${url}: ${error.message}`)
      if (redis) {
        try {
          await redis.quit()
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        }
      }
    }
  }
  
  if (!connected) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É Redis —Å–µ—Ä–≤–µ—Ä—É')
    console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω')
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ —Ñ–∞–π—Ä–≤–æ–ª–∞')
    console.log('3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã')
    return
  }
  
  try {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
    
    // 1. –°–æ–∑–¥–∞–µ–º admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const hashedPasswordAdmin = await bcrypt.hash('admin', 10)
    await redis.hSet('user:admin', {
      id: '1',
      username: 'admin',
      fullName: 'System Administrator',
      email: 'admin@defendsphere.com',
      organization: 'System',
      organizations: JSON.stringify(['Company LLD', 'Watson Morris']),
      position: 'System Administrator',
      role: 'admin',
      phone: '+1-555-0000',
      permissions: JSON.stringify([
        'access.dashboard',
        'access.assets',
        'access.compliance',
        'access.customerTrust',
        'access.suppliers',
        'access.reports',
        'access.integrations',
        'access.admin'
      ]),
      additionalOrganizations: JSON.stringify([]),
      createdAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
      password: hashedPasswordAdmin
    })
    await redis.sAdd('users', 'admin')
    console.log('‚úÖ Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω')
    
    // 2. –°–æ–∑–¥–∞–µ–º jon –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ jon –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const hashedPasswordJon = await bcrypt.hash('jon123', 10)
    await redis.hSet('user:jon', {
      id: '5',
      username: 'jon',
      fullName: 'Jon Smith',
      email: 'jon@watson-morris.com',
      organization: 'Watson Morris',
      organizations: JSON.stringify(['Watson Morris']),
      position: 'Security Manager',
      role: 'user',
      phone: '+1-555-0104',
      permissions: JSON.stringify([
        'access.dashboard',
        'access.assets',
        'access.reports',
        'access.compliance',
        'access.customerTrust',
        'access.suppliers'
      ]),
      additionalOrganizations: JSON.stringify([]),
      createdAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
      password: hashedPasswordJon
    })
    await redis.sAdd('users', 'jon')
    console.log('‚úÖ Jon –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω')
    
    // 3. –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...')
    await redis.sAdd('organizations', 'Company LLD', 'Watson Morris')
    await redis.sAdd('organizations:names', 'Company LLD', 'Watson Morris')
    console.log('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã')
    
    // 4. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤—ã –¥–ª—è Company LLD
    console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ Company LLD...')
    const companyLLDAssets = [
      {
        id: 'asset-1',
        assetId: 'asset-1',
        name: 'www.company-lld.com',
        type: 'Web Server',
        environment: 'Production',
        ipAddress: '116.203.242.207',
        lastAssessment: '2025-09-10',
        complianceScore: 75,
        standards: JSON.stringify(['NIS2', 'GDPR', 'ISO/IEC 27001']),
        vulnerabilities: JSON.stringify({
          critical: 1,
          high: 3,
          medium: 5,
          low: 1,
          total: 10
        }),
        organization: 'Company LLD'
      },
      {
        id: 'asset-2',
        assetId: 'asset-2',
        name: 'db.company-lld.com',
        type: 'Database Server',
        environment: 'Production',
        ipAddress: '10.0.0.12',
        lastAssessment: '2025-09-10',
        complianceScore: 70,
        standards: JSON.stringify(['NIS2', 'ISO/IEC 27001']),
        vulnerabilities: JSON.stringify({
          critical: 1,
          high: 2,
          medium: 4,
          low: 1,
          total: 8
        }),
        organization: 'Company LLD'
      },
      {
        id: 'asset-3',
        assetId: 'asset-3',
        name: 'app.company-lld.com',
        type: 'Application Server',
        environment: 'Production',
        ipAddress: '10.0.0.21',
        lastAssessment: '2025-09-10',
        complianceScore: 80,
        standards: JSON.stringify(['GDPR', 'ISO/IEC 27001']),
        vulnerabilities: JSON.stringify({
          critical: 2,
          high: 3,
          medium: 3,
          low: 1,
          total: 9
        }),
        organization: 'Company LLD'
      },
      {
        id: 'asset-4',
        assetId: 'asset-4',
        name: 'vpn.company-lld.com',
        type: 'VPN Gateway',
        environment: 'Production',
        ipAddress: '10.0.0.30',
        lastAssessment: '2025-09-10',
        complianceScore: 75,
        standards: JSON.stringify(['NIS2']),
        vulnerabilities: JSON.stringify({
          critical: 1,
          high: 1,
          medium: 2,
          low: 1,
          total: 5
        }),
        organization: 'Company LLD'
      }
    ]
    
    for (const asset of companyLLDAssets) {
      await redis.hSet(`asset:${asset.id}`, asset)
      await redis.sAdd('assets', asset.id)
      await redis.sAdd('assets:Company LLD', asset.id)
      await redis.sAdd('company:company-lld:assetIds', asset.id)
      await redis.hSet('company:company-lld:assets', asset.id, JSON.stringify(asset))
    }
    console.log('‚úÖ –ê–∫—Ç–∏–≤—ã Company LLD —Å–æ–∑–¥–∞–Ω—ã (4 –∞–∫—Ç–∏–≤–∞)')
    
    // 5. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤—ã –¥–ª—è Watson Morris
    console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ Watson Morris...')
    const watsonMorrisAssets = [
      {
        id: 'wm-asset-1',
        assetId: 'wm-asset-1',
        name: 'www.watson-morris.com',
        type: 'Web Server',
        environment: 'Production',
        ipAddress: '192.168.1.100',
        lastAssessment: '2025-09-10',
        complianceScore: 85,
        standards: JSON.stringify(['ISO/IEC 27001', 'SOC 2']),
        vulnerabilities: JSON.stringify({
          critical: 0,
          high: 2,
          medium: 3,
          low: 2,
          total: 7
        }),
        organization: 'Watson Morris'
      },
      {
        id: 'wm-asset-2',
        assetId: 'wm-asset-2',
        name: 'db.watson-morris.com',
        type: 'Database Server',
        environment: 'Production',
        ipAddress: '192.168.1.101',
        lastAssessment: '2025-09-10',
        complianceScore: 90,
        standards: JSON.stringify(['ISO/IEC 27001']),
        vulnerabilities: JSON.stringify({
          critical: 0,
          high: 1,
          medium: 2,
          low: 1,
          total: 4
        }),
        organization: 'Watson Morris'
      }
    ]
    
    for (const asset of watsonMorrisAssets) {
      await redis.hSet(`asset:${asset.id}`, asset)
      await redis.sAdd('assets', asset.id)
      await redis.sAdd('assets:Watson Morris', asset.id)
      await redis.sAdd('company:watson-morris:assetIds', asset.id)
      await redis.hSet('company:watson-morris:assets', asset.id, JSON.stringify(asset))
    }
    console.log('‚úÖ –ê–∫—Ç–∏–≤—ã Watson Morris —Å–æ–∑–¥–∞–Ω—ã (2 –∞–∫—Ç–∏–≤–∞)')
    
    console.log('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('')
    console.log('üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:')
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: admin, jon')
    console.log('üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: Company LLD, Watson Morris')
    console.log('üíæ –ê–∫—Ç–∏–≤—ã: 4 (Company LLD) + 2 (Watson Morris) = 6 –∞–∫—Ç–∏–≤–æ–≤')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error)
  } finally {
    if (redis) {
      await redis.quit()
    }
  }
}

autoRecovery()